package TH1;

import java.util.Arrays;

public class Task1_2 {
	// Input: 10 11 12 13 14 16 17 19 20
	// Output: 15 18
	public static int[] getMissingValues(int[] arrayNum) {
		int indexResult = 0; 
		int[] result = new int [arrayNum[arrayNum.length -1] - arrayNum[0] - arrayNum.length + 1];
		int i = arrayNum[0];
		for(int j = 0; j < arrayNum.length; j++) {		
			if(arrayNum[j] != i) {
				result[indexResult] = i;
				indexResult++;
				j++;
			}
			i++;
		}
		return result;
	}

	
	// Input: 10 11 12 -1 14 10 17 19 20
	// Output(k=3): 10 11 12 12 14 16 17 19 20
	public int[] fillMissingValues(int k, int[] arrayNum) {
		for(int i = 0; i < arrayNum.length; i++ ) {
			if(arrayNum[i] == -1) {
				
			}
		}
		return null;
	}
	
	
//	
	public static int[] findSymmetricNeighbors(int[] array, int target, int k) {
	    int[] neighbors = new int[k];
	    int neighborCount = 0;
	    int left = target - 1;
	    int right = target + 1;

	    while (neighborCount < k && (left >= 0 || right < array.length)) {
	        // Kiểm tra số bên trái và bên phải có bằng nhau không
	        if (left >= 0 && right < array.length && array[left] == array[right]) {
	            neighbors[neighborCount] = array[left];
	            neighborCount++;
	            neighbors[neighborCount] = array[right];
	            neighborCount++;
	        } else if (left >= 0) {
	            neighbors[neighborCount] = array[left];
	            neighborCount++;
	        } else if (right < array.length) {
	            neighbors[neighborCount] = array[right];
	            neighborCount++;
	        }

	        left--;
	        right++;
	    }

	    // Trả về mảng rỗng nếu không tìm thấy đủ k số lân cận đối xứng
	    if (neighborCount < k) {
	        return new int[0];
	    }

	    return neighbors;
	}


	public static void main(String[] args) {
		int[] arrayNum = { 10, 11, 12, 13, 14, 16, 17, 19, 20 };
		System.out.println(Arrays.toString(getMissingValues(arrayNum)));
		
		
		int []nums = {10, 11, 12, -1, 14, 10, 17, 19, 20};
		System.out.println(Arrays.toString(findSymmetricNeighbors(nums, -1, 3)));
		
	}
}
